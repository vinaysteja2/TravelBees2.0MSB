package com.touristguide.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.touristguide.dto.TouristGuideDto;
import com.touristguide.entity.TouristGuide;
import com.touristguide.serviceimpl.TouristGuideServiceImpl;

import jakarta.validation.Valid;

@RestController
//@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/tourist-guides")
public class TouristGuideController {
	
private static final Logger logger = LoggerFactory.getLogger(TouristGuideController.class);

	
@Autowired
private TouristGuideServiceImpl touristGuideServiceImpl;

@PostMapping
public ResponseEntity<?> addTouristGuide(@Valid @RequestBody TouristGuide touristGuide) {
  try {
	  logger.info("Http request to save touristGuide");
      logger.debug("This is a debug message");
      logger.error("This is an error message");
      TouristGuide createdTouristGuide = touristGuideServiceImpl.addTouristGuide(touristGuide);
      return ResponseEntity.status(HttpStatus.CREATED).body(createdTouristGuide);
  } catch (IllegalArgumentException e) {
  	
  	return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email is already in use");
  
  }
}


@GetMapping("/{id}")
public ResponseEntity<?> getTouristGuideById(@PathVariable Long id) {
	logger.info("Http request to get touristGuideDetails");
    TouristGuideDto touristGuideDto = touristGuideServiceImpl.getTouristGuideById(id);
    if (touristGuideDto != null) {
    	 return ResponseEntity.status(HttpStatus.CREATED).body(touristGuideDto);
    } else {
    	return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("touristGuide not found");
    }
}

    @PatchMapping("/{touristGuideId}")
    public ResponseEntity<?> updateTouristGuide(@PathVariable Long touristGuideId, @Valid @RequestBody TouristGuide updatedTouristGuide) {
        try {
        	logger.info("Http request to update touristGuide");
            touristGuideServiceImpl.updateTouristGuide(touristGuideId, updatedTouristGuide);
            return ResponseEntity.status(HttpStatus.CREATED).body("Tourist guide updated successfully");
  
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred");
        }
    }
    
    @DeleteMapping("/{touristGuideId}")
    public ResponseEntity<Void> deleteTouristGuide(@PathVariable Long touristGuideId) {
        try {
        	logger.info("Http request to delete touristGuide");
            touristGuideServiceImpl.deleteTouristGuide(touristGuideId);
            return ResponseEntity.noContent().build();
            
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
    
    @GetMapping("/search/{location}")
    public ResponseEntity<?> searchTouristGuides(@PathVariable("location") String location) {
    	 try {
    		 logger.info("Http request to search touristGuide based on location");
             List<TouristGuide> touristGuides = touristGuideServiceImpl.searchTouristGuides( location);
             return ResponseEntity.status(HttpStatus.OK).body(touristGuides);
         } catch (Exception e) {
            
             e.printStackTrace();
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to retrieve  locations of tourist guide");
         }
     }

    @GetMapping
    public ResponseEntity<?> getAllTouristGuides() {
        try {
        	logger.info("Http request to Get All touristGuides");
            List<TouristGuide> touristGuides = touristGuideServiceImpl.getAllTouristGuides();
            return ResponseEntity.status(HttpStatus.OK).body(touristGuides);
        } catch (Exception e) {
            // Log the exception for debugging purposes
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to retrieve tours of tourist guides");
        }
    }
    @GetMapping("locations")
    public ResponseEntity<?> getAllLocations() {
    	  try {
    		  logger.info("Http request to get all locations");
        List<String> locations=touristGuideServiceImpl.getAllLocations();
        return ResponseEntity.status(HttpStatus.OK).body(locations);
    } catch (Exception e) {
        
        e.printStackTrace();
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to retrieve locations of tourist guides");
    }
}

}
